// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`aspect-ratio range features aspectRatio() returns the correct media fragment 1`] = `(aspect-ratio: 2/3)`;

exports[`aspect-ratio range features aspectRatio() throws if aspectRatio breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`aspect-ratio range features aspectRatio() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range features maxAspectRatio() returns the correct media fragment 1`] = `(max-aspect-ratio: 2/3)`;

exports[`aspect-ratio range features maxAspectRatio() throws if aspectRatio breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`aspect-ratio range features maxAspectRatio() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range features minAspectRatio() returns the correct media fragment 1`] = `(min-aspect-ratio: 2/3)`;

exports[`aspect-ratio range features minAspectRatio() throws if aspectRatio breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`aspect-ratio range features minAspectRatio() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range queries aboveAspectRatio() returns the correct media query for 'large' 1`] = `
@media screen and (min-aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries aboveAspectRatio() returns the correct media query for 'medium' 1`] = `
@media screen and (min-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries aboveAspectRatio() returns the correct media query for 'small' 1`] = `
@media screen and (min-aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries aboveAspectRatio() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries aboveAspectRatio() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range queries atAspectRatio() returns the correct media query for 'large' 1`] = `
@media screen and (aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatio() returns the correct media query for 'medium' 1`] = `
@media screen and (aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatio() returns the correct media query for 'small' 1`] = `
@media screen and (aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatio() returns the correct media query for 'xLarge' 1`] = `
@media screen and (aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatio() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range queries belowAspectRatio() returns the correct media query for 'large' 1`] = `
@media screen and (max-aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries belowAspectRatio() returns the correct media query for 'medium' 1`] = `
@media screen and (max-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries belowAspectRatio() returns the correct media query for 'small' 1`] = `
@media screen and (max-aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries belowAspectRatio() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries belowAspectRatio() throws if breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-aspect-ratio: 1/1) and (max-aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-aspect-ratio: 3/2) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-aspect-ratio: 1/1) and (max-aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-aspect-ratio: 1/1) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 3/2) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-aspect-ratio: 3/2) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-aspect-ratio: 1/1) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`aspect-ratio range queries betweenAspectRatios() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`aspect-ratio range queries betweenAspectRatios() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'aspect-ratio' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range features color() returns the correct media fragment 1`] = `(color: 1)`;

exports[`color range features color() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range features color() throws if color breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`color range features maxColor() returns the correct media fragment 1`] = `(max-color: 1)`;

exports[`color range features maxColor() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range features maxColor() throws if color breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`color range features minColor() returns the correct media fragment 1`] = `(min-color: 1)`;

exports[`color range features minColor() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range features minColor() throws if color breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`color range queries aboveColor() returns the correct media query for 'large' 1`] = `
@media screen and (min-color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries aboveColor() returns the correct media query for 'medium' 1`] = `
@media screen and (min-color: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries aboveColor() returns the correct media query for 'small' 1`] = `
@media screen and (min-color: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries aboveColor() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries aboveColor() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range queries atColor() returns the correct media query for 'large' 1`] = `
@media screen and (color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColor() returns the correct media query for 'medium' 1`] = `
@media screen and (color: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColor() returns the correct media query for 'small' 1`] = `
@media screen and (color: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColor() returns the correct media query for 'xLarge' 1`] = `
@media screen and (color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColor() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range queries atColorBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColorBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (color: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColorBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (color: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColorBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries atColorBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range queries belowColor() returns the correct media query for 'large' 1`] = `
@media screen and (max-color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries belowColor() returns the correct media query for 'medium' 1`] = `
@media screen and (max-color: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries belowColor() returns the correct media query for 'small' 1`] = `
@media screen and (max-color: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries belowColor() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries belowColor() throws if breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range queries betweenColors() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-color: 4) and (max-color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-color: 1) and (max-color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-color: 5) and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-color: 4) and (max-color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-color: 1) and (max-color: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-color: 4) and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-color: 1) and (max-color: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-color: 1) and (max-color: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-color: 1) and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-color: 5) and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-color: 4) and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-color: 1) and (max-color: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color range queries betweenColors() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`color range queries betweenColors() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color range queries betweenColors() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'color' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range features colorIndex() returns the correct media fragment 1`] = `(color-index: 1)`;

exports[`color-index range features colorIndex() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range features colorIndex() throws if colorIndex breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`color-index range features maxColorIndex() returns the correct media fragment 1`] = `(max-color-index: 1)`;

exports[`color-index range features maxColorIndex() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range features maxColorIndex() throws if colorIndex breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`color-index range features minColorIndex() returns the correct media fragment 1`] = `(min-color-index: 1)`;

exports[`color-index range features minColorIndex() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range features minColorIndex() throws if colorIndex breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`color-index range queries aboveColorIndex() returns the correct media query for 'large' 1`] = `
@media screen and (min-color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries aboveColorIndex() returns the correct media query for 'medium' 1`] = `
@media screen and (min-color-index: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries aboveColorIndex() returns the correct media query for 'small' 1`] = `
@media screen and (min-color-index: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries aboveColorIndex() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries aboveColorIndex() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range queries atColorIndex() returns the correct media query for 'large' 1`] = `
@media screen and (color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndex() returns the correct media query for 'medium' 1`] = `
@media screen and (color-index: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndex() returns the correct media query for 'small' 1`] = `
@media screen and (color-index: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndex() returns the correct media query for 'xLarge' 1`] = `
@media screen and (color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndex() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range queries atColorIndexBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndexBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (color-index: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndexBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (color-index: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndexBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries atColorIndexBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range queries belowColorIndex() returns the correct media query for 'large' 1`] = `
@media screen and (max-color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries belowColorIndex() returns the correct media query for 'medium' 1`] = `
@media screen and (max-color-index: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries belowColorIndex() returns the correct media query for 'small' 1`] = `
@media screen and (max-color-index: 1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries belowColorIndex() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries belowColorIndex() throws if breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-color-index: 4) and (max-color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-color-index: 1) and (max-color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-color-index: 5) and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-color-index: 4) and (max-color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-color-index: 1) and (max-color-index: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-color-index: 4) and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-color-index: 1) and (max-color-index: 5) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-color-index: 1) and (max-color-index: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-color-index: 1) and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-color-index: 5) and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-color-index: 4) and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-color-index: 1) and (max-color-index: 6) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`color-index range queries betweenColorIndexs() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`color-index range queries betweenColorIndexs() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`color-index range queries betweenColorIndexs() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'color-index' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`colorGamut() linear feature returns the supplied color-gamut for 'p3' 1`] = `(colorGamut: p3)`;

exports[`colorGamut() linear feature returns the supplied color-gamut for 'rec2020' 1`] = `(colorGamut: rec2020)`;

exports[`colorGamut() linear feature returns the supplied color-gamut for 'srgb' 1`] = `(colorGamut: srgb)`;

exports[`colorGamut() linear feature throws if argument is not valid value 1`] = `'colorGamut'must be one of: 'srgb,p3,rec2020' but was: 'xxxx'.`;

exports[`colorGamut() linear feature throws if no argument is supplied 1`] = `'colorGamut'must be one of: 'srgb,p3,rec2020' but was: 'undefined'.`;

exports[`configuration config object baseFontSize adjusts values based on 'basefontSize' 1`] = `
@media screen and (max-width: 39.999em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`configuration config object baseFontSize throws if 'baseFontSize' is not a positive number 1`] = `'baseFontSize'must be a number, but you supplied 'xxxx'`;

exports[`configuration config object defaultMediaType throws if 'defaultMediaType' is not valid 1`] = `'defaultMediaType'must be one of 'all,print,screen,speech,' but was 'xxxx'.`;

exports[`configuration config object dimensionsUnit throws if 'dimensionsUnit' is not valid 1`] = `'unit'must be one of 'em,rem,px' but was 'xxxx'.`;

exports[`configuration config object shouldSeparateQueries throws if 'shouldSeparateQueries' is not a boolean 1`] = `'shouldSeparateQueries'must be a boolean but was 'undefined'.`;

exports[`configuration throws if invalid breakpoint value is supplied 1`] = `You must supply a dimension as a unitless number but you supplied ["xxx"]`;

exports[`configuration throws if no breakpoint sets are supplied 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`configuration throws if no breakpoints are supplied 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied 'undefined'.`;

exports[`displayMode() linear feature returns the supplied display-mode for 'browser' 1`] = `(displayMode: browser)`;

exports[`displayMode() linear feature returns the supplied display-mode for 'fullscreen' 1`] = `(displayMode: fullscreen)`;

exports[`displayMode() linear feature returns the supplied display-mode for 'minimal-ui' 1`] = `(displayMode: minimal-ui)`;

exports[`displayMode() linear feature returns the supplied display-mode for 'standalone' 1`] = `(displayMode: standalone)`;

exports[`displayMode() linear feature throws if argument is not valid value 1`] = `'displayMode'must be one of: 'fullscreen,standalone,minimal-ui,browser' but was: 'xxxx'.`;

exports[`displayMode() linear feature throws if no argument is supplied 1`] = `'displayMode'must be one of: 'fullscreen,standalone,minimal-ui,browser' but was: 'undefined'.`;

exports[`grid() linear feature returns a valueless grid 1`] = `(grid)`;

exports[`grid() linear feature returns the supplied grid for '0' 1`] = `(grid: 0)`;

exports[`grid() linear feature returns the supplied grid for '1' 1`] = `(grid: 1)`;

exports[`grid() linear feature throws if argument is not valid value 1`] = `'grid'must be one of: '0,1' but was: 'xxxx'.`;

exports[`height range features height() doesn't separate dimensionsUnits if not configured 1`] = `(height: 25em)`;

exports[`height range features height() renders configured dimensionsUnits 1`] = `(height: 25rem)`;

exports[`height range features height() renders configured dimensionsUnits 2`] = `(height: 400px)`;

exports[`height range features height() returns the correct media fragment 1`] = `(height: 25em)`;

exports[`height range features height() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range features height() throws if height breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`height range features maxHeight() doesn't separate dimensionsUnits if not configured 1`] = `(max-height: 25em)`;

exports[`height range features maxHeight() renders configured dimensionsUnits 1`] = `(max-height: 24.999375rem)`;

exports[`height range features maxHeight() renders configured dimensionsUnits 2`] = `(max-height: 399px)`;

exports[`height range features maxHeight() returns the correct media fragment 1`] = `(max-height: 24.999375em)`;

exports[`height range features maxHeight() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range features maxHeight() throws if height breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`height range features minHeight() doesn't separate dimensionsUnits if not configured 1`] = `(min-height: 25em)`;

exports[`height range features minHeight() renders configured dimensionsUnits 1`] = `(min-height: 25rem)`;

exports[`height range features minHeight() renders configured dimensionsUnits 2`] = `(min-height: 400px)`;

exports[`height range features minHeight() returns the correct media fragment 1`] = `(min-height: 25em)`;

exports[`height range features minHeight() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range features minHeight() throws if height breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`height range queries aboveHeight() returns the correct media query for 'large' 1`] = `
@media screen and (min-height: 68.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries aboveHeight() returns the correct media query for 'medium' 1`] = `
@media screen and (min-height: 56.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries aboveHeight() returns the correct media query for 'small' 1`] = `
@media screen and (min-height: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries aboveHeight() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-height: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries aboveHeight() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range queries atHeight() returns the correct media query for 'large' 1`] = `
@media screen and (height: 68.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeight() returns the correct media query for 'medium' 1`] = `
@media screen and (height: 56.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeight() returns the correct media query for 'small' 1`] = `
@media screen and (height: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeight() returns the correct media query for 'xLarge' 1`] = `
@media screen and (height: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeight() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range queries atHeightBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (height: 68.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (height: 56.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (height: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (height: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range queries belowHeight() returns the correct media query for 'large' 1`] = `
@media screen and (max-height: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries belowHeight() returns the correct media query for 'medium' 1`] = `
@media screen and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries belowHeight() returns the correct media query for 'small' 1`] = `
@media screen and (max-height: 24.999375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries belowHeight() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries belowHeight() throws if breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range queries betweenHeights() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-height: 56.25em) and (max-height: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-height: 25em) and (max-height: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-height: 68.75em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-height: 56.25em) and (max-height: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-height: 56.25em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-height: 25em) and (max-height: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-height: 25em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-height: 68.75em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-height: 56.25em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-height: 25em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`height range queries betweenHeights() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`height range queries betweenHeights() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'height' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`mediaType returns the correct default media type if called with no arguments 1`] = `screen`;

exports[`mediaType returns the supplied mediaType for '' 1`] = ``;

exports[`mediaType returns the supplied mediaType for 'all' 1`] = `all`;

exports[`mediaType returns the supplied mediaType for 'print' 1`] = `print`;

exports[`mediaType returns the supplied mediaType for 'screen' 1`] = `screen`;

exports[`mediaType returns the supplied mediaType for 'speech' 1`] = `speech`;

exports[`mediaType supports multiple values 1`] = `screen, speech,`;

exports[`mediaType throws if argument is not valid media type 1`] = `'mediaType'must be one of 'all,print,screen,speech,' but you supplied: 'xxxx'.`;

exports[`monochrome range features maxMonochrome() returns the correct media fragment 1`] = `(max-monochrome: 0)`;

exports[`monochrome range features maxMonochrome() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range features maxMonochrome() throws if monochrome breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`monochrome range features minMonochrome() returns the correct media fragment 1`] = `(min-monochrome: 0)`;

exports[`monochrome range features minMonochrome() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range features minMonochrome() throws if monochrome breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`monochrome range features monochrome() returns the correct media fragment 1`] = `(monochrome: 0)`;

exports[`monochrome range features monochrome() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range features monochrome() throws if monochrome breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`monochrome range queries aboveMonochrome() returns the correct media query for 'large' 1`] = `
@media screen and (min-monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries aboveMonochrome() returns the correct media query for 'medium' 1`] = `
@media screen and (min-monochrome: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries aboveMonochrome() returns the correct media query for 'small' 1`] = `
@media screen and (min-monochrome: 0) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries aboveMonochrome() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries aboveMonochrome() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range queries atMonochrome() returns the correct media query for 'large' 1`] = `
@media screen and (monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochrome() returns the correct media query for 'medium' 1`] = `
@media screen and (monochrome: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochrome() returns the correct media query for 'small' 1`] = `
@media screen and (monochrome: 0) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochrome() returns the correct media query for 'xLarge' 1`] = `
@media screen and (monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochrome() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range queries atMonochromeBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochromeBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (monochrome: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochromeBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (monochrome: 0) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochromeBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries atMonochromeBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range queries belowMonochrome() returns the correct media query for 'large' 1`] = `
@media screen and (max-monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries belowMonochrome() returns the correct media query for 'medium' 1`] = `
@media screen and (max-monochrome: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries belowMonochrome() returns the correct media query for 'small' 1`] = `
@media screen and (max-monochrome: 0) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries belowMonochrome() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries belowMonochrome() throws if breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-monochrome: 4) and (max-monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-monochrome: 0) and (max-monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-monochrome: 8) and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-monochrome: 4) and (max-monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-monochrome: 0) and (max-monochrome: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-monochrome: 4) and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-monochrome: 0) and (max-monochrome: 8) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-monochrome: 0) and (max-monochrome: 4) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-monochrome: 0) and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-monochrome: 8) and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-monochrome: 4) and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-monochrome: 0) and (max-monochrome: 16) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`monochrome range queries betweenMonochromes() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`monochrome range queries betweenMonochromes() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`monochrome range queries betweenMonochromes() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'monochrome' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`orientation() linear feature returns the supplied orientation for 'landscape' 1`] = `(orientation: landscape)`;

exports[`orientation() linear feature returns the supplied orientation for 'portrait' 1`] = `(orientation: portrait)`;

exports[`orientation() linear feature throws if argument is not valid value 1`] = `'orientation'must be one of: 'portrait,landscape' but was: 'xxxx'.`;

exports[`orientation() linear feature throws if no argument is supplied 1`] = `'orientation'must be one of: 'portrait,landscape' but was: 'undefined'.`;

exports[`overflowBlock() linear feature returns the supplied overflow-block for 'none' 1`] = `(overflowBlock: none)`;

exports[`overflowBlock() linear feature returns the supplied overflow-block for 'optional-paged' 1`] = `(overflowBlock: optional-paged)`;

exports[`overflowBlock() linear feature returns the supplied overflow-block for 'scroll' 1`] = `(overflowBlock: scroll)`;

exports[`overflowBlock() linear feature throws if argument is not valid value 1`] = `'overflowBlock'must be one of: 'none,scroll,optional-paged' but was: 'xxxx'.`;

exports[`overflowBlock() linear feature throws if no argument is supplied 1`] = `'overflowBlock'must be one of: 'none,scroll,optional-paged' but was: 'undefined'.`;

exports[`overflowInline() linear feature returns the supplied overflow-inline for 'none' 1`] = `(overflowInline: none)`;

exports[`overflowInline() linear feature returns the supplied overflow-inline for 'scroll' 1`] = `(overflowInline: scroll)`;

exports[`overflowInline() linear feature throws if argument is not valid value 1`] = `'overflowInline'must be one of: 'none,scroll' but was: 'xxxx'.`;

exports[`overflowInline() linear feature throws if no argument is supplied 1`] = `'overflowInline'must be one of: 'none,scroll' but was: 'undefined'.`;

exports[`resolution range features maxResolution() doesn't separate dimensionsUnits if not configured 1`] = `(max-resolution: 72dpi)`;

exports[`resolution range features maxResolution() returns the correct media fragment 1`] = `(max-resolution: 71dpi)`;

exports[`resolution range features maxResolution() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range features maxResolution() throws if resolution breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`resolution range features minResolution() doesn't separate dimensionsUnits if not configured 1`] = `(min-resolution: 72dpi)`;

exports[`resolution range features minResolution() returns the correct media fragment 1`] = `(min-resolution: 72dpi)`;

exports[`resolution range features minResolution() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range features minResolution() throws if resolution breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`resolution range features resolution() doesn't separate dimensionsUnits if not configured 1`] = `(resolution: 72dpi)`;

exports[`resolution range features resolution() returns the correct media fragment 1`] = `(resolution: 72dpi)`;

exports[`resolution range features resolution() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range features resolution() throws if resolution breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`resolution range queries aboveResolution() returns the correct media query for 'large' 1`] = `
@media screen and (min-resolution: 300dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries aboveResolution() returns the correct media query for 'medium' 1`] = `
@media screen and (min-resolution: 150dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries aboveResolution() returns the correct media query for 'small' 1`] = `
@media screen and (min-resolution: 72dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries aboveResolution() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-resolution: 600dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries aboveResolution() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range queries atResolution() returns the correct media query for 'large' 1`] = `
@media screen and (resolution: 300dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolution() returns the correct media query for 'medium' 1`] = `
@media screen and (resolution: 150dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolution() returns the correct media query for 'small' 1`] = `
@media screen and (resolution: 72dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolution() returns the correct media query for 'xLarge' 1`] = `
@media screen and (resolution: 600dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolution() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (resolution: 300dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (resolution: 150dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (resolution: 72dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (resolution: 600dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range queries belowResolution() returns the correct media query for 'large' 1`] = `
@media screen and (max-resolution: 299dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries belowResolution() returns the correct media query for 'medium' 1`] = `
@media screen and (max-resolution: 149dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries belowResolution() returns the correct media query for 'small' 1`] = `
@media screen and (max-resolution: 71dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries belowResolution() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries belowResolution() throws if breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-resolution: 150dpi) and (max-resolution: 299dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 299dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-resolution: 300dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-resolution: 150dpi) and (max-resolution: 299dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 149dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-resolution: 150dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 299dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 149dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-resolution: 300dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-resolution: 150dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`resolution range queries betweenResolutions() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`resolution range queries betweenResolutions() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'resolution' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`scan() linear feature returns the supplied scan for 'interlace' 1`] = `(scan: interlace)`;

exports[`scan() linear feature returns the supplied scan for 'progressive' 1`] = `(scan: progressive)`;

exports[`scan() linear feature throws if argument is not valid value 1`] = `'scan'must be one of: 'interlace,progressive' but was: 'xxxx'.`;

exports[`scan() linear feature throws if no argument is supplied 1`] = `'scan'must be one of: 'interlace,progressive' but was: 'undefined'.`;

exports[`tweaked adds includes both old breakpoints and added tweakpoints 1`] = `
@media screen and (min-width: 18.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`tweaked adds includes both old breakpoints and added tweakpoints 2`] = `
@media screen and (min-width: 68.75em) and (max-width: 18.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`tweaked doesn't effect the original mq 1`] = `There is no 'width' breakpoint defined called 'alpha', only: 'small,medium,large,xLarge' are defined.`;

exports[`tweaked doesn't effect the original mq 2`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`tweakpoints throws if invalid breakpoint value is supplied 1`] = `You must supply a dimension as a unitless number but you supplied ["xxx"]`;

exports[`tweakpoints throws if no breakpoint sets are supplied 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`tweakpoints throws if no breakpoints are supplied 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied 'undefined'.`;

exports[`update() linear feature returns a valueless update 1`] = `(update)`;

exports[`update() linear feature returns the supplied update for 'fast' 1`] = `(update: fast)`;

exports[`update() linear feature returns the supplied update for 'none' 1`] = `(update: none)`;

exports[`update() linear feature returns the supplied update for 'slow' 1`] = `(update: slow)`;

exports[`update() linear feature throws if argument is not valid value 1`] = `'update'must be one of: 'none,slow,fast' but was: 'xxxx'.`;

exports[`width range features maxWidth() doesn't separate dimensionsUnits if not configured 1`] = `(max-width: 25em)`;

exports[`width range features maxWidth() renders configured dimensionsUnits 1`] = `(max-width: 24.999375rem)`;

exports[`width range features maxWidth() renders configured dimensionsUnits 2`] = `(max-width: 399px)`;

exports[`width range features maxWidth() returns the correct media fragment 1`] = `(max-width: 24.999375em)`;

exports[`width range features maxWidth() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range features maxWidth() throws if width breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`width range features minWidth() doesn't separate dimensionsUnits if not configured 1`] = `(min-width: 25em)`;

exports[`width range features minWidth() renders configured dimensionsUnits 1`] = `(min-width: 25rem)`;

exports[`width range features minWidth() renders configured dimensionsUnits 2`] = `(min-width: 400px)`;

exports[`width range features minWidth() returns the correct media fragment 1`] = `(min-width: 25em)`;

exports[`width range features minWidth() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range features minWidth() throws if width breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`width range features width() doesn't separate dimensionsUnits if not configured 1`] = `(width: 25em)`;

exports[`width range features width() renders configured dimensionsUnits 1`] = `(width: 25rem)`;

exports[`width range features width() renders configured dimensionsUnits 2`] = `(width: 400px)`;

exports[`width range features width() returns the correct media fragment 1`] = `(width: 25em)`;

exports[`width range features width() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range features width() throws if width breakpoint map doesn't exist 1`] = `You must supply at least one set of breakpoints to 'configure()', but the you supplied '{}'.`;

exports[`width range queries aboveWidth() returns the correct media query for 'large' 1`] = `
@media screen and (min-width: 68.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries aboveWidth() returns the correct media query for 'medium' 1`] = `
@media screen and (min-width: 56.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries aboveWidth() returns the correct media query for 'small' 1`] = `
@media screen and (min-width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries aboveWidth() returns the correct media query for 'xLarge' 1`] = `
@media screen and (min-width: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries aboveWidth() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range queries atWidth() returns the correct media query for 'large' 1`] = `
@media screen and (width: 68.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidth() returns the correct media query for 'medium' 1`] = `
@media screen and (width: 56.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidth() returns the correct media query for 'small' 1`] = `
@media screen and (width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidth() returns the correct media query for 'xLarge' 1`] = `
@media screen and (width: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidth() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range queries atWidthBreakpoint() returns the correct media query for 'large' 1`] = `
@media screen and (width: 68.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() returns the correct media query for 'medium' 1`] = `
@media screen and (width: 56.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() returns the correct media query for 'small' 1`] = `
@media screen and (width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() returns the correct media query for 'xLarge' 1`] = `
@media screen and (width: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range queries belowWidth() returns the correct media query for 'large' 1`] = `
@media screen and (max-width: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries belowWidth() returns the correct media query for 'medium' 1`] = `
@media screen and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries belowWidth() returns the correct media query for 'small' 1`] = `
@media screen and (max-width: 24.999375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries belowWidth() returns the correct media query for 'xLarge' 1`] = `
@media screen and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries belowWidth() throws if breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range queries betweenWidths() returns the correct media query for 'large' and 'medium' 1`] = `
@media screen and (min-width: 56.25em) and (max-width: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'large' and 'small' 1`] = `
@media screen and (min-width: 25em) and (max-width: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'large' and 'xLarge' 1`] = `
@media screen and (min-width: 68.75em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'medium' and 'large' 1`] = `
@media screen and (min-width: 56.25em) and (max-width: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'medium' and 'small' 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'medium' and 'xLarge' 1`] = `
@media screen and (min-width: 56.25em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'small' and 'large' 1`] = `
@media screen and (min-width: 25em) and (max-width: 68.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'small' and 'medium' 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'small' and 'xLarge' 1`] = `
@media screen and (min-width: 25em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'xLarge' and 'large' 1`] = `
@media screen and (min-width: 68.75em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'xLarge' and 'medium' 1`] = `
@media screen and (min-width: 56.25em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query for 'xLarge' and 'small' 1`] = `
@media screen and (min-width: 25em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() throws if 'from' and 'to' breakpoints are the same value 1`] = `You must supply two different breakpoints to 'widthBetween' but both were: 'large'.`;

exports[`width range queries betweenWidths() throws if 'from' breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;

exports[`width range queries betweenWidths() throws if 'to' breakpoint doesn't exist 1`] = `There is no 'width' breakpoint defined called 'xxxx', only: 'small,medium,large,xLarge' are defined.`;
