// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`aspect-ratio range features aspectRatio() returns the correct media fragment 1`] = `(aspect-ratio: 2/3)`;

exports[`aspect-ratio range features maxAspectRatio() returns the correct media fragment 1`] = `(max-aspect-ratio: 2/3)`;

exports[`aspect-ratio range features minAspectRatio() returns the correct media fragment 1`] = `(min-aspect-ratio: 2/3)`;

exports[`aspect-ratio range queries aboveAspectRatio() returns the correct media query 1`] = `
@media screen and (min-aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatio() returns the correct media query 1`] = `
@media screen and (aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct query when it is between other breakpoints 1`] = `
@media screen and (min-aspect-ratio: 3/2) and (max-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct query when it is first breakpoint 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries atAspectRatioBreakpoint() returns the correct query when it is last breakpoint 1`] = `
@media screen and (min-aspect-ratio: 16/9) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries belowAspectRatio() returns the correct media query 1`] = `
@media screen and (max-aspect-ratio: 2/3) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aspect-ratio range queries betweenAspectRatios() returns the correct media query with breakpoint order reversed 1`] = `
@media screen and (min-aspect-ratio: 2/3) and (max-aspect-ratio: 1/1) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`configuration config object adjusts values based on 'basefontSize' 1`] = `
@media screen and (max-width: 39.999em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`grid linear feature returns the supplied grid for '0' 1`] = `(grid: 0)`;

exports[`grid linear feature returns the supplied grid for '1' 1`] = `(grid: 1)`;

exports[`height range features height() doesn't separate dimensionsUnits if not configured 1`] = `(height: 25em)`;

exports[`height range features height() renders configured dimensionsUnits 1`] = `(height: 25rem)`;

exports[`height range features height() renders configured dimensionsUnits 2`] = `(height: 400px)`;

exports[`height range features height() returns the correct media fragment 1`] = `(height: 25em)`;

exports[`height range features maxHeight() doesn't separate dimensionsUnits if not configured 1`] = `(max-height: 25em)`;

exports[`height range features maxHeight() renders configured dimensionsUnits 1`] = `(max-height: 24.999375rem)`;

exports[`height range features maxHeight() renders configured dimensionsUnits 2`] = `(max-height: 399px)`;

exports[`height range features maxHeight() returns the correct media fragment 1`] = `(max-height: 24.999375em)`;

exports[`height range features minHeight() doesn't separate dimensionsUnits if not configured 1`] = `(min-height: 25em)`;

exports[`height range features minHeight() renders configured dimensionsUnits 1`] = `(min-height: 25rem)`;

exports[`height range features minHeight() renders configured dimensionsUnits 2`] = `(min-height: 400px)`;

exports[`height range features minHeight() returns the correct media fragment 1`] = `(min-height: 25em)`;

exports[`height range queries aboveHeight() returns the correct media query 1`] = `
@media screen and (min-height: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeight() returns the correct media query 1`] = `
@media screen and (height: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() returns the correct query when it is between other breakpoints 1`] = `
@media screen and (min-height: 68.75em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() returns the correct query when it is first breakpoint 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries atHeightBreakpoint() returns the correct query when it is last breakpoint 1`] = `
@media screen and (min-height: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries belowHeight() returns the correct media query 1`] = `
@media screen and (max-height: 24.999375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`height range queries betweenHeights() returns the correct media query with breakpoint order reversed 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`mediaType returns the correct default media type if called with no arguments 1`] = `screen`;

exports[`mediaType returns the supplied mediaType for '' 1`] = ``;

exports[`mediaType returns the supplied mediaType for 'all' 1`] = `all`;

exports[`mediaType returns the supplied mediaType for 'print' 1`] = `print`;

exports[`mediaType returns the supplied mediaType for 'screen' 1`] = `screen`;

exports[`mediaType returns the supplied mediaType for 'speech' 1`] = `speech`;

exports[`mediaType supports multiple values 1`] = `screen, speech,`;

exports[`orientation linear feature returns the supplied orientation for 'landscape' 1`] = `(orientation: landscape)`;

exports[`orientation linear feature returns the supplied orientation for 'portrait' 1`] = `(orientation: portrait)`;

exports[`overflow-block linear feature returns the supplied overflow-block for 'none' 1`] = `(overflowBlock: none)`;

exports[`overflow-block linear feature returns the supplied overflow-block for 'optional-paged' 1`] = `(overflowBlock: optional-paged)`;

exports[`overflow-block linear feature returns the supplied overflow-block for 'scroll' 1`] = `(overflowBlock: scroll)`;

exports[`resolution range features maxResolution() doesn't separate dimensionsUnits if not configured 1`] = `(max-resolution: 72dpi)`;

exports[`resolution range features maxResolution() returns the correct media fragment 1`] = `(max-resolution: 71dpi)`;

exports[`resolution range features minResolution() doesn't separate dimensionsUnits if not configured 1`] = `(min-resolution: 72dpi)`;

exports[`resolution range features minResolution() returns the correct media fragment 1`] = `(min-resolution: 72dpi)`;

exports[`resolution range features resolution() doesn't separate dimensionsUnits if not configured 1`] = `(resolution: 72dpi)`;

exports[`resolution range features resolution() returns the correct media fragment 1`] = `(resolution: 72dpi)`;

exports[`resolution range queries aboveResolution() returns the correct media query 1`] = `
@media screen and (min-resolution: 72dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolution() returns the correct media query 1`] = `
@media screen and (resolution: 72dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct query when it is between other breakpoints 1`] = `
@media screen and (min-resolution: 300dpi) and (max-resolution: 599dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct query when it is first breakpoint 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 149dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries atResolutionBreakpoint() returns the correct query when it is last breakpoint 1`] = `
@media screen and (min-resolution: 600dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries belowResolution() returns the correct media query 1`] = `
@media screen and (max-resolution: 71dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 149dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`resolution range queries betweenResolutions() returns the correct media query with breakpoint order reversed 1`] = `
@media screen and (min-resolution: 72dpi) and (max-resolution: 149dpi) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`scan linear feature returns the supplied scan for 'interlace' 1`] = `(scan: interlace)`;

exports[`scan linear feature returns the supplied scan for 'progressive' 1`] = `(scan: progressive)`;

exports[`tweaked adds includes both old breakpoints and added tweakpoints 1`] = `
@media screen and (min-width: 18.75em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`tweaked adds includes both old breakpoints and added tweakpoints 2`] = `
@media screen and (min-width: 68.75em) and (max-width: 18.749375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`tweaked doesn't effect the original mq 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`update linear feature returns the supplied update for 'fast' 1`] = `(update: fast)`;

exports[`update linear feature returns the supplied update for 'none' 1`] = `(update: none)`;

exports[`update linear feature returns the supplied update for 'slow' 1`] = `(update: slow)`;

exports[`width range features maxWidth() doesn't separate dimensionsUnits if not configured 1`] = `(max-width: 25em)`;

exports[`width range features maxWidth() renders configured dimensionsUnits 1`] = `(max-width: 24.999375rem)`;

exports[`width range features maxWidth() renders configured dimensionsUnits 2`] = `(max-width: 399px)`;

exports[`width range features maxWidth() returns the correct media fragment 1`] = `(max-width: 24.999375em)`;

exports[`width range features minWidth() doesn't separate dimensionsUnits if not configured 1`] = `(min-width: 25em)`;

exports[`width range features minWidth() renders configured dimensionsUnits 1`] = `(min-width: 25rem)`;

exports[`width range features minWidth() renders configured dimensionsUnits 2`] = `(min-width: 400px)`;

exports[`width range features minWidth() returns the correct media fragment 1`] = `(min-width: 25em)`;

exports[`width range features width() doesn't separate dimensionsUnits if not configured 1`] = `(width: 25em)`;

exports[`width range features width() renders configured dimensionsUnits 1`] = `(width: 25rem)`;

exports[`width range features width() renders configured dimensionsUnits 2`] = `(width: 400px)`;

exports[`width range features width() returns the correct media fragment 1`] = `(width: 25em)`;

exports[`width range queries aboveWidth() returns the correct media query 1`] = `
@media screen and (min-width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidth() returns the correct media query 1`] = `
@media screen and (width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() returns the correct query when it is between other breakpoints 1`] = `
@media screen and (min-width: 68.75em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() returns the correct query when it is first breakpoint 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries atWidthBreakpoint() returns the correct query when it is last breakpoint 1`] = `
@media screen and (min-width: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries belowWidth() returns the correct media query 1`] = `
@media screen and (max-width: 24.999375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`width range queries betweenWidths() returns the correct media query with breakpoint order reversed 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;
