// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`aboveWidth returns the correct media query 1`] = `
@media screen and (min-width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`aboveWidth returns the correct media query 2`] = `
@media screen and (min-width: 25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`atHeightBreakpoint returns the correct query when it is between other breakpoints 1`] = `
@media screen and (min-height: 68.75em) and (max-height: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`atHeightBreakpoint returns the correct query when it is first breakpoint 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`atHeightBreakpoint returns the correct query when it is last breakpoint 1`] = `
@media screen and (min-height: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`atWidthBreakpoint returns the correct query when it is between other breakpoints 1`] = `
@media screen and (min-width: 68.75em) and (max-width: 81.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`atWidthBreakpoint returns the correct query when it is first breakpoint 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`atWidthBreakpoint returns the correct query when it is last breakpoint 1`] = `
@media screen and (min-width: 81.25em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`belowWidth returns the correct media query 1`] = `
@media screen and (max-width: 24.999375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`belowWidth returns the correct media query 2`] = `
@media screen and (max-width: 24.999375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`betweenHeights returns the correct media query 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`betweenHeights returns the correct media query with breakpoint order reversed 1`] = `
@media screen and (min-height: 25em) and (max-height: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`betweenWidths returns the correct media query 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`betweenWidths returns the correct media query with breakpoint order reversed 1`] = `
@media screen and (min-width: 25em) and (max-width: 56.249375em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`configuration config object adjusts values based on 'basefontSize' 1`] = `
@media screen and (max-width: 39.999em) {
    background-color: function () {
        return 'GhostWhite';
    }; ;
}
`;

exports[`maxHeight renders configured units 1`] = `(max-height: 24.999375rem)`;

exports[`maxHeight renders configured units 2`] = `(max-height: 400px)`;

exports[`maxHeight returns the correct media fragment 1`] = `(max-height: 24.999375em)`;

exports[`maxWidth renders configured units 1`] = `(max-width: 24.999375rem)`;

exports[`maxWidth renders configured units 2`] = `(max-width: 400px)`;

exports[`maxWidth returns the correct media fragment 1`] = `(max-width: 24.999375em)`;

exports[`mediaType returns the configured media type if passed in as argument 1`] = `print`;

exports[`mediaType returns the configured media type if passed in as argument 2`] = `print, screen`;

exports[`mediaType returns the correct default media type if called with no arguments 1`] = `screen`;

exports[`minHeight renders configured units 1`] = `(min-height: 25rem)`;

exports[`minHeight renders configured units 2`] = `(min-height: 400px)`;

exports[`minHeight returns the correct media fragment 1`] = `(min-height: 25em)`;

exports[`minWidth renders configured units 1`] = `(min-width: 25rem)`;

exports[`minWidth renders configured units 2`] = `(min-width: 400px)`;

exports[`minWidth returns the correct media fragment 1`] = `(min-width: 25em)`;

exports[`orientation returns the supplied orientation 1`] = `(orientation: landscape)`;
